pkgdown::build_site()
pkgdown::build_site()
library(agriutilities)
usethis::use_logo()
usethis::use_logo(img = "man/figures/logo.png")
pkgdown::build_site()
usethis::use_readme_rmd()
#usethis::use_package(package = "agridat", type = "Suggest")
usethis::use_package(package = "agridat", type = "Suggests")
rlang::is_installed("agridat")
rlang::check_installed("agridat")
library(agriutilities)
library(agridat)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
obj <- single_model_analysis(results, progress = FALSE)
obj$resum_fitted_model
pkgdown::build_site()
pkgdown::build_site()
library(ASRtriala)
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(agriutilities)
library(agridat)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = "yield",
rep = "rep",
block = "block",
col = "col",
row = "row"
)
results
results$exp_design_resum
results$connectivity_matrix
pkgdown::build_site()
install.packages("lintr")
library(lintr)
lint(filename = "R/parametersGG.R")
lint(filename = "R/checkConection.R")
lint(filename = "R/checkConection.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/checkDesign.R")
seq_len(4)
seq_len(NA)
lint(filename = "R/checkDesign.R")
lint(filename = "R/checkDesign.R")
lint(filename = "R/checkDesign.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/heritability.R")
lint(filename = "R/heritability.R")
devtools::build_readme()
library(agriutilities)
styler:::style_active_file()
design = "res_row_col"
design_td <- switch(
design,
"res_row_col" = "res.rowcol",
"row_col" = "row.col",
"alpha_lattice" = "res.ibd",
"rcbd" = "rcbd"
)
design_td
design = "row_col"
design_td <- switch(
design,
"res_row_col" = "res.rowcol",
"row_col" = "row.col",
"alpha_lattice" = "res.ibd",
"rcbd" = "rcbd"
)
design_td
a <- list("2")
b <- list("44")
rbind(a, b)
list(a, b)
data.table::rbindlist(a,b)
data.table::rbindlist(a,b, use.names = FALSE
)
data.table::rbindlist(a,b, use.names = TRUE)
rbind(a = a, b = b)
list(a = a, b = b)
c <- list(a = a, b = b)
a <- list()
b <- list(carro = "1")
a <- list(a, b)
a
indx <- LETTERS
indx
a <- list()
indx <- LETTERS
for (i in indx) {
a[[i]] <- list(
a[[i]],
res_row_col = rnorm(n = 1)
)
}
a
a$B$``
a <- list()
indx <- LETTERS
for (i in indx) {
a[[i]] <- c(
a[[i]],
res_row_col = rnorm(n = 1)
)
}
a
a$A
a <- list()
indx <- LETTERS
for (i in indx) {
a[[i]] <- c(
a[[i]],
res_row_col = list(rnorm(n = 1))
)
}
a$A$res_row_col
a$A$res_row_col
library(agriutilities)
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_model_analysis(results, progress = FALSE)
library(agriutilities)
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_model_analysis(results, progress = FALSE)
out$resum_fitted_model
out$fitted_models$yield$res_row_col.C1
library(agriutilities)
library(agriutilities)
library(agriutilities)
a <-  NULL
a
library(agriutilities)
#' @noRd
#' @keywords internal
fit_STA <- function(results, trait, design, remove_outliers, engine, progress) {
design_td <- switch(
design,
"res_row_col" = "res.rowcol",
"row_col" = "row.col",
"alpha_lattice" = "res.ibd",
"rcbd" = "rcbd"
)
if (design %in% "alpha_lattice" || design %in% "rcbd") {
results$inputs$row <- NULL
results$inputs$col <- NULL
}
m_models <- list()
results <- results
exp_to_remove <- results$filter[[trait]]$trials_to_remove
trials <- results$data_design %>%
filter(
exp_design == design &
!.data[[results$inputs$trial]] %in% exp_to_remove
) %>%
pull(results$inputs$trial) %>%
as.character() %>%
unique()
data <- results$data_design %>%
filter(.data[[results$inputs$trial]] %in% trials) %>%
droplevels()
if (nrow(data) > 0) {
td <- createTD(
data = data,
genotype = results$inputs$genotype,
trial = results$inputs$trial,
repId = results$inputs$rep,
subBlock = results$inputs$block,
rowCoord = results$inputs$row,
colCoord = results$inputs$col,
trDesign = design_td
)
m_models <- fitTD(
TD = td,
traits = trait,
what = c("fixed", "random"),
spatial = TRUE,
progress = progress,
engine = engine
)
# Residuals
outliers_td <- outlierSTA(
STA = m_models,
traits = trait,
rLimit = 3,
verbose = FALSE
)
# Cleaning
if (!is.null(outliers_td$outliers) && remove_outliers) {
outliers_td <- outliers_td %>%
.[["outliers"]] %>%
dplyr::select(trial, genotype, id, outlier)
data_clean <- data %>%
merge(
x = .,
y = outliers_td,
by.x = c(results$inputs$trial, results$inputs$genotype, "id"),
by.y = c("trial", "genotype", "id"),
all = TRUE,
sort = FALSE
) %>%
mutate(
outlier = ifelse(is.na(outlier), FALSE, outlier),
!!trait := ifelse(
test = outlier == TRUE,
yes = NA,
no = .data[[trait]]
)
) %>%
droplevels() %>%
data.frame() %>%
rename(outlier = outlier)
td <- createTD(
data = data_clean,
genotype = results$inputs$genotype,
trial = results$inputs$trial,
repId = results$inputs$rep,
subBlock = results$inputs$block,
rowCoord = results$inputs$row,
colCoord = results$inputs$col,
trDesign = design_td
)
m_models <- fitTD(
TD = td,
traits = trait,
what = c("fixed", "random"),
spatial = TRUE,
progress = progress,
engine = engine
)
}
# Heritability
h2_cullis <- extractSTA(
STA = m_models,
what = "heritability"
)
# VarComps
VarG <- extractSTA(
STA = m_models,
what = "varGen"
)
VarE <- extractSTA(
STA = m_models,
what = "varErr"
)
# CV
CV <- extractSTA(
STA = m_models,
what = "CV"
)
names(h2_cullis)[2] <- "heritability"
names(VarG)[2] <- "VarGen"
names(VarE)[2] <- "VarErr"
names(CV)[2] <- "CV"
resum_fitted_model <- merge(
x = merge(x = h2_cullis, CV, by = "trial"),
y = merge(x = VarG, VarE, by = "trial"),
by = "trial"
) %>%
mutate(design = design)
fitted_models <- m_models
# BLUES
blues_TD <- STAtoTD(m_models, keep = c("trial"), addWt = TRUE)
blues_TD <- do.call(rbind, lapply(blues_TD, as.data.frame))
blues_blups <- blues_TD
# standardized residuals
stdRes <- extractSTA(
STA = m_models,
what = "stdResR"
)
std_residuals <- stdRes
out <- list(
fitted_models = fitted_models,
resum_fitted_model = resum_fitted_model,
outliers = outliers_td,
blues_blups = blues_blups,
std_residuals = std_residuals
)
return(out)
}
}
library(agriutilities)
library(agriutilities)
styler:::style_active_file()
library(agriutilities)
library(agriutilities)
library(agriutilities)
styler:::style_active_file()
library(agriutilities)
pkgdown::build_site()
pkgdown::build_site()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
install.packages("lintr")
lintr::lint(filename = "R/fitSingle.R")
lintr::lint(filename = "R/fitSingle.R")
lintr::lint(filename = "R/fitSingle.R")
lintr::lint(filename = "R/fitSingle.R")
lintr::lint(filename = "R/checkConection.R")
lintr::lint(filename = "R/checkDesign.R")
lintr::lint(filename = "R/heritability.R")
lintr::lint(filename = "R/ggCor.R")
styler:::style_active_file()
styler:::style_active_file()
ccc <- runif(n = 20, min = -1, max = 1)
ccc
ccc <- runif(n = 20, min = 0, max = 1)
cc
ccc
cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
)
pBreaks = c(0, .0001, .001, .01, Inf)
cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
)
pLabels = c("***", "**", "*", "ns")
cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
)
data.frame(ccc, cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(ccc, val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 1), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 1), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 0.05), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 0.01), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 0.001), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(r = runif(n = 20, min = 0, max = 0.0001), val = cut(
x = ccc, right = FALSE,
breaks = pBreaks, labels = pLabels
))
data.frame(
r = ,
val = cut(x = ccc, right = FALSE, breaks = pBreaks, labels = pLabels)
)
pBreaks = c(0, .0001, .001, .01, Inf)
pLabels = c("***", "**", "*", "ns")
r <- runif(n = 20, min = 0, max = 0.001)
data.frame(
r = r,
val = cut(x = ccc, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- runif(n = 20, min = 0, max = 0.001)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- runif(n = 20, min = 0, max = 0.05)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r
round(r,3)
r <- round(runif(n = 20, min = 0, max = 0.05), 4)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
pBreaks = c(0, .0001, .001, .01, Inf)
pLabels = c("***", "**", "*", "ns")
r <- round(runif(n = 20, min = 0, max = 0.05), 4)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- 0.01
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- 0.001
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
.05+ .05
.001 + .001
pBreaks = c(0, .0001, .001, .05, Inf)
pLabels = c("***", "**", "*", "ns")
r <- 0.001
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
pBreaks = c(0, .001, .01, .05, Inf)
pLabels = c("***", "**", "*", "ns")
r <- 0.001
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- round(runif(n = 20, min = 0, max = 0.05), 4)
r <- round(runif(n = 20, min = 0, max = 0.05), 4)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
pBreaks = c(0, .001, .01, .05, Inf)
pLabels = c("***", "**", "*", "ns")
r <- round(runif(n = 20, min = 0, max = 0.05), 4)
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- 0.01
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
r <- 0.009
data.frame(
r = r,
val = cut(x = r, right = FALSE, breaks = pBreaks, labels = pLabels)
)
library(agriutilities)
library(agriutilities)
data(iris) ggCor(iris,colours = c("#db4437","white","#4285f4"), returnN = TRUE )
data(iris)
ggCor(iris,colours = c("#db4437","white","#4285f4"), returnN = TRUE )
data(iris)
ggCor(iris,colours = c("#db4437","white","#4285f4"), returnN = FALSE )
data(iris)
ggCor(iris,colours = c("#db4437","white","#4285f4"), returnN = FALSE , label_size = 5)
data(iris)
ggCor(iris,colours = c("#db4437","white","#4285f4"), returnN = FALSE , label_size = 6)
pkgdown::build_site()
library(agriutilities)
pkgdown::build_site()
devtools::build_readme()
pkgdown::build_site()
devtools::load_all(".")
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
