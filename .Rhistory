ma <- asreml(travel~1, random=~Rail, data=Rail)
vc(ma)
summary(ma)$varcomp
data.frame(effect = summary(ma)$varcomp, summary(ma)$varcomp)
data.frame(effect = rownames(summary(ma)$varcomp), summary(ma)$varcomp)
model = ma
vars <- summary(model)$varcomp
vars
vars <- data.frame(effect = rownames(vars), vars, check.names = FALSE)
vars
lucid::vc(ma)
lucid::vc(ma) %>% class
install.packages("roxygen2")
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
globalVariables()
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
pkgdown::build_site()
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
library(agridat)
data(besag.met)
dat <- besag.met
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
library(tidyverse)
library(agridat)
data(besag.met)
dat <- besag.met
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
rlang::last_error()
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
# {
#   if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]])) %>%
#   } else {
#     .
#   }
# } %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
library(tidyverse)
library(agridat)
data(besag.met)
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
conn
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(.data = ., !is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
data(besag.met)
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
conn
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = NULL
)
conn
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(.data = ., !is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
styler:::style_active_pkg()
6.330.000 +
6.330.000
6330000 +2779800
library(agriutilities)
styler:::style_active_file()
extractG
agriutilities::extractG
install.packages("cli")
install.packages("cli")
remove.packages("cli")
install.packages("cli")
install.packages("ClickHouseHTTP")
install.packages("cli")
library(agriutilities)
library(tidyverse)
library(asreml)
library(agridat)
data(besag.met)
dat <- besag.met
dat <- dat %>% arrange(county)
model <- asreml(fixed = yield ~ 1 + county,
random = ~ fa(county, 2):gen + county:rep + diag(county):rep:block,
residual = ~ dsum(~ units | county),
data = dat,
na.action = list(x="include",y="include"))
heritability_fa(model_fa = model, genotype = "gen", env = "county", vc.model = "fa2")
#' @param model_fa Factor Analytic asreml model
#' @param genotype String
#' @param env String
#' @param vc.model variance covariance structure c("fa1", "fa2", "fa3", "fa4", "us")
#'
#' @return data.frame
#' @export
#'
#' @examples
#' # in progress
heritability_fa <- function(model_fa = NULL,
genotype = "line",
env = "loc",
vc.model = c("fa1", "fa2", "fa3", "fa4", "us")) {
G <- extractG(
model = model_fa,
gen = genotype,
env = env,
vc.model = "fa2"
)$VCOV
Gvar <- mean(G[upper.tri(G, diag = FALSE)])
pr <- predict(model_fa, classify = genotype, sed = TRUE, trace = 0)
vdBLUP.mat <- pr$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
H2Cullis <- 1 - (vdBLUP.avg / 2 / Gvar)
H2Cullis
avsed <- pr$pvals %>%
summarise(mean = mean(std.error^2)) %>%
as.numeric()
h2_js <- 1 - avsed / Gvar
return(list(H2Cullis = H2Cullis, h2_js = h2_js))
}
library(tidyverse)
library(asreml)
library(agridat)
data(besag.met)
dat <- besag.met
dat <- dat %>% arrange(county)
model <- asreml(fixed = yield ~ 1 + county,
random = ~ fa(county, 2):gen + county:rep + diag(county):rep:block,
residual = ~ dsum(~ units | county),
data = dat,
na.action = list(x="include",y="include"))
heritability_fa(model_fa = model, genotype = "gen", env = "county", vc.model = "fa2")
#' @param model_fa Factor Analytic asreml model
#' @param genotype String
#' @param env String
#' @param vc.model variance covariance structure c("fa1", "fa2", "fa3", "fa4", "us")
#'
#' @return data.frame
#' @export
#'
#' @examples
#' # in progress
heritability_fa <- function(model_fa = NULL,
genotype = "line",
env = "loc",
vc.model = c("fa1", "fa2", "fa3", "fa4", "us")) {
G <- extractG(
model = model_fa,
gen = genotype,
env = env,
vc.model = "fa2"
)$VCOV
Gvar <- mean(G[upper.tri(G, diag = FALSE)])
pr <- suppressWarnings(
predict(model_fa, classify = genotype, sed = TRUE, trace = 0)
)
vdBLUP.mat <- pr$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
H2Cullis <- 1 - (vdBLUP.avg / 2 / Gvar)
H2Cullis
avsed <- pr$pvals %>%
summarise(mean = mean(std.error^2)) %>%
as.numeric()
h2_js <- 1 - avsed / Gvar
return(list(H2Cullis = H2Cullis, h2_js = h2_js))
}
heritability_fa(model_fa = model, genotype = "gen", env = "county", vc.model = "fa2")
#' @param model_fa Factor Analytic asreml model
#' @param genotype String
#' @param env String
#' @param vc.model variance covariance structure c("fa1", "fa2", "fa3", "fa4", "us")
#'
#' @return data.frame
#' @export
#'
#' @examples
#' # in progress
heritability_fa <- function(model_fa = NULL,
genotype = "line",
env = "loc",
vc.model = c("fa2")) {
G <- extractG(
model = model_fa,
gen = genotype,
env = env,
vc.model = vc.model
)$VCOV
Gvar <- mean(G[upper.tri(G, diag = FALSE)])
pr <- suppressWarnings(
predict(model_fa, classify = genotype, sed = TRUE, trace = 0)
)
vdBLUP.mat <- pr$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
H2Cullis <- 1 - (vdBLUP.avg / 2 / Gvar)
H2Cullis
avsed <- pr$pvals %>%
summarise(mean = mean(std.error^2)) %>%
as.numeric()
h2_js <- 1 - avsed / Gvar
return(list(H2Cullis = H2Cullis, h2_js = h2_js))
}
heritability_fa(model_fa = model, genotype = "gen", env = "county", vc.model = "fa2")
styler:::style_active_file()
styler:::style_active_file()
library(agriutilities)
library(agriutilities)
install.packages("roxygen2")
graphics::hist()
pkgdown::build_site()
library(agriutilities)
library(agriutilities)
styler:::style_active_file()
styler:::style_active_file()
usethis::use_package("lattice")
usethis::use_package("cluster")
pkgdown::build_site()
library(agriutilities)
usethis::use_package("SpATS")
library(SpATS)
data(wheatdata)
summary(wheatdata)
# Create factor variable for row and columns
wheatdata$R <- as.factor(wheatdata$row)
wheatdata$C <- as.factor(wheatdata$col)
m0 <- SpATS(response = "yield", spatial = ~ SAP(col, row, nseg = c(10,20), degree = 3, pord = 2),
genotype = "geno", fixed = ~ colcode + rowcode, random = ~ R + C, data = wheatdata,
control =  list(tolerance = 1e-03))
# Brief summary
m0
residuals(m0)
stats::residuals(m0)
pkgdown::build_site()
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(agriutilities)
usethis::use_logo()
usethis::use_logo(img = "man/figures/logo.png")
pkgdown::build_site()
usethis::use_readme_rmd()
#usethis::use_package(package = "agridat", type = "Suggest")
usethis::use_package(package = "agridat", type = "Suggests")
rlang::is_installed("agridat")
rlang::check_installed("agridat")
library(agriutilities)
library(agridat)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
obj <- single_model_analysis(results, progress = FALSE)
obj$resum_fitted_model
pkgdown::build_site()
pkgdown::build_site()
library(ASRtriala)
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(agriutilities)
library(agridat)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = "yield",
rep = "rep",
block = "block",
col = "col",
row = "row"
)
results
results$exp_design_resum
results$connectivity_matrix
pkgdown::build_site()
install.packages("lintr")
library(lintr)
lint(filename = "R/parametersGG.R")
lint(filename = "R/checkConection.R")
lint(filename = "R/checkConection.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/fitSingle.R")
lint(filename = "R/checkDesign.R")
seq_len(4)
seq_len(NA)
lint(filename = "R/checkDesign.R")
lint(filename = "R/checkDesign.R")
lint(filename = "R/checkDesign.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/ggCor.R")
lint(filename = "R/heritability.R")
lint(filename = "R/heritability.R")
devtools::build_readme()
library(agriutilities)
