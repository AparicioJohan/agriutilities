library(SpATS)
library(agriutilities)
library(SpATS)
library(agriutilities)
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles_index()
pkgdown::build_articles()
library(agriutilities)
library(SpATS)
wheatdata[ 1 , "yield"]
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles()
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles()
pkgdown::build_articles_index()
pkgdown::build_articles()
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_articles()
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
usethis::use_package("data.table")
install.packages("qpdf")
usethis::use_package("SpATS")
library(agriutilities)
pkgdown::build_reference_index
library(agriutilities)
pkgdown::init_site()
pkgdown::build_home()
pkgdown::build_reference(lazy = F)
pkgdown::build_reference_index()
pkgdown::build_articles(lazy = F)
pkgdown::build_articles_index()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agridat)
data(besag.met)
dat <- besag.met
checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
heatmap(conn)
data(besag.met)
dat <- besag.met
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
heatmap(conn)
conn
res <- factoextra::hcut(conn, k = 3, stand = FALSE)
factoextra::fviz_dend(
x = res,
rect = FALSE,
cex = 0.5,
lwd = 0.5,
main = "Dendrogram",
horiz = TRUE
)
conn
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
conn
library(agridat)
data(besag.met)
dat <- besag.met
checkConection(data = dat, genotype = "gen", trial = "county", response = "yield", all = T)
checkConection(data = dat, genotype = "gen", trial = "county", response = "yield", all = F)
library(agridat)
data(besag.met)
dat <- besag.met
checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
data = dat
genotype = "gen"
trial = "county"
response = "yield"
response = "yield"
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value)
library(tidyverse)
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype)
tmp_data <- data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data
dat$gen
dat[dat$gen == "G02", "yield"]
dat[dat$gen == "G02", "yield"] <- 0
data = dat
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
data(besag.met)
dat <- besag.met
dat[dat$gen == "G02", "yield"] <- 0
data = dat
dat
dat[dat$gen == "G02", "yield"] <- NA
data = dat
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
dat[dat$gen == "G02", "yield"]
dat[dat$gen == "G02", "yield"] %>% length()
dat[dat$gen == "G02", "yield"] <- c(1:5)
dat[dat$gen == "G02", "yield"] <- c(1:5, NA)
data(besag.met)
dat <- besag.met
dat[dat$gen == "G02", "yield"] <- c(1:5, NA)
dat
dat[dat$gen == "G02", "yield"]
data = dat
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
library(agridat)
data(besag.met)
dat <- besag.met
dat[dat$gen == "G02", "yield"] <- c(1:5, rep(NA, 13))
dat[dat$gen == "G02", "yield"]
data = dat
data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data <- data %>%
dplyr::filter(!is.na(.data[[response]])) %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data
is.na(tmp_data)
tmp_data[is.na(tmp_data)] <- 0
tmp_data
tmp_data * t(tmp_data)
t(tmp_data)
tmp_data %*% t(tmp_data)
t(tmp_data) %*% tmp_data
checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
t(tmp_data) %*% tmp_data
tmp_data %*% t(tmp_data)
library(agriutilities)
data(besag.met)
dat <- besag.met
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
conn
devtools::load_all(".")
library(agriutilities)
usethis::use_package("tibble")
usethis::use_package("rlang")
usethis::use_package("lucid")
usethis::use_package("SpATS")
usethis::use_package("lattice")
styler:::style_active_file()
library(asreml)
ma <- asreml(travel~1, random=~Rail, data=Rail)
data(Rail)
require("nlme")
data(Rail)
ma <- asreml(travel~1, random=~Rail, data=Rail)
vc(ma)
library(lucid)
ma <- asreml(travel~1, random=~Rail, data=Rail)
vc(ma)
summary(ma)$varcomp
data.frame(effect = summary(ma)$varcomp, summary(ma)$varcomp)
data.frame(effect = rownames(summary(ma)$varcomp), summary(ma)$varcomp)
model = ma
vars <- summary(model)$varcomp
vars
vars <- data.frame(effect = rownames(vars), vars, check.names = FALSE)
vars
lucid::vc(ma)
lucid::vc(ma) %>% class
install.packages("roxygen2")
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
globalVariables()
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
pkgdown::build_site()
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
library(agridat)
data(besag.met)
dat <- besag.met
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
library(tidyverse)
library(agridat)
data(besag.met)
dat <- besag.met
conn <- checkConection2(data = dat, genotype = "gen", trial = "county", response = "yield")
rlang::last_error()
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
# {
#   if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]])) %>%
#   } else {
#     .
#   }
# } %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
library(tidyverse)
library(agridat)
data(besag.met)
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
conn
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(!is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(.data = ., !is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
data(besag.met)
dat <- besag.met
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = "yield"
)
conn
conn <- checkConection2(
data = dat,
genotype = "gen",
trial = "county",
response = NULL
)
conn
#' # factoextra::fviz_dend(
#' #   x = res,
#' #   rect = FALSE,
#' #   cex = 0.5,
#' #   lwd = 0.5,
#' #   main = "Dendrogram",
#' #   horiz = TRUE
#' # )
#' @importFrom rlang .data
#' @import dplyr tidyr tibble
checkConection2 <- function(data,
genotype = "germplasmName",
trial = "trial",
response = "YDHA") {
tmp_data <- data %>%
{
if (!is.null(response)) {
dplyr::filter(.data = ., !is.na(.data[[response]]))
} else {
.
}
} %>%
dplyr::select(.data[[genotype]], .data[[trial]]) %>%
unique.data.frame() %>%
dplyr::mutate(value = 1) %>%
tidyr::spread(.data[[trial]], value = value) %>%
tibble::column_to_rownames(genotype) %>%
as.matrix()
tmp_data[is.na(tmp_data)] <- 0
conectivity <- t(tmp_data) %*% tmp_data
return(conectivity)
}
