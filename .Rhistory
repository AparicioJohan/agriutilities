VCOV[[var]] <- extractG(
model = met_mod,
gen = "genotype",
env = "trial",
vc.model = vcov_selected
)
# trial effects
trial_effects[[var]] <- rbind(
trial_effects[[var]],
suppressWarnings(
as.data.frame(
asreml::predict.asreml(met_mod, classify = "trial")$pvals
)
)
)
# Overall BLUPs
BLUPs <- suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype", sed = TRUE)
)
overall_BLUPs[[var]] <- rbind(
overall_BLUPs[[var]],
suppressWarnings(
as.data.frame(
BLUPs$pvals
)
)
)
# BLUPs GxE
BLUPs_GxE[[var]] <- rbind(
BLUPs_GxE[[var]],
as.data.frame(
suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype:trial")$pvals
)
)
)
# Stability
stab_genotypes <- stability(
predictions = BLUPs_GxE[[var]],
trial = "trial",
gen = "genotype",
best = "max"
)
stab_list[[var]] <- rbind(stab_list[[var]], stab_genotypes)
# Heritability
g_var <- mean(VCOV[[var]]$VCOV[upper.tri(VCOV[[var]]$VCOV, diag = FALSE)])
vdBLUP.mat <- BLUPs$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
h2_tmp <- 1 - (vdBLUP.avg / 2 / g_var)
h2_tmp <- data.frame(trait = var, h2 = h2_tmp)
h2_list[[var]] <- rbind(h2_list[[var]], h2_tmp)
}
trial_effects <- dplyr::bind_rows(trial_effects, .id = "trait")
overall_BLUPs <- dplyr::bind_rows(overall_BLUPs, .id = "trait")
BLUPs_GxE <- dplyr::bind_rows(BLUPs_GxE, .id = "trait")
stab_list <- dplyr::bind_rows(stab_list, .id = "trait")
h2_list <- dplyr::bind_rows(h2_list, .id = "trait")
objt_out <- list(
trial_effects = trial_effects,
overall_BLUPs = overall_BLUPs,
BLUPs_GxE = BLUPs_GxE,
VCOV = VCOV,
stability = stab_list,
heritability = h2_list
)
return(objt_out)
}
tmp <- met_analysis(sma_output = out)
tmp$heritability
tmp$trial_effects
tmp$overall_BLUPs
tmp$BLUPs_GxE
tmp$VCOV
met_analysis <- function(sma_output = NULL,
h2_filter = 0.2,
workspace = "1gb",
trials_to_fit_fa = 4) {
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
if (!requireNamespace("asreml", quietly = TRUE)) {
stop("The package asreml is not loaded.")
}
asreml::asreml.options(trace = FALSE, workspace = workspace)
data_td <- sma_output$blues_blups
traits <- data_td %>%
dplyr::pull("trait") %>%
unique() %>%
as.character()
trials <- data_td %>%
dplyr::pull("trial") %>%
unique() %>%
as.character()
n_trials <- length(trials)
if (n_trials <= 1) {
stop("There is only one trial to fit an MET model.")
}
conn <- connectivity_matrix(
data = data_td,
genotype = "genotype",
trial = "trial"
)
ceros <- which(conn == 0, arr.ind = TRUE)
if (nrow(ceros) > 1) {
warning(
"Some trials have zero connectivity: \t",
paste(rownames(ceros), collapse = ", ")
)
}
minimun_req <- which(conn < 20, arr.ind = TRUE)
if (nrow(minimun_req) > 1) {
message(
"Some trials could have poor connectivity: \t",
paste(rownames(ceros), collapse = ", ")
)
}
met_models <- VCOV <- trial_effects <- overall_BLUPs <- BLUPs_GxE <- list()
stab_list <- h2_list <- list()
for (var in traits) {
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(trait %in% var & heritability > h2_filter) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
dt <- data_td %>%
dplyr::filter(trait %in% var & trial %in% trials_to_keep) %>%
droplevels() %>%
as.data.frame()
equation_fix <- reformulate("trial", response = "BLUEs")
if (n_trials < trials_to_fit_fa) {
vcov_selected <- "us"
equation_ran <- reformulate("us(trial):genotype")
}
if (n_trials >= trials_to_fit_fa) {
vcov_selected <- "fa2"
equation_ran <- reformulate("fa(trial, 2):genotype")
}
met_mod <- suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "include", y = "include"),
trace = 0,
maxiter = 200
)
)
met_mod <- suppressWarnings(asreml::update.asreml(met_mod))
met_models[[var]] <- met_mod
VCOV[[var]] <- extractG(
model = met_mod,
gen = "genotype",
env = "trial",
vc.model = vcov_selected
)
# trial effects
trial_effects[[var]] <- rbind(
trial_effects[[var]],
suppressWarnings(
as.data.frame(
asreml::predict.asreml(met_mod, classify = "trial")$pvals
)
)
)
# Overall BLUPs
BLUPs <- suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype", sed = TRUE)
)
overall_BLUPs[[var]] <- rbind(
overall_BLUPs[[var]],
suppressWarnings(
as.data.frame(
BLUPs$pvals
)
)
)
# BLUPs GxE
BLUPs_GxE[[var]] <- rbind(
BLUPs_GxE[[var]],
as.data.frame(
suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype:trial")$pvals
)
)
)
# Stability
stab_genotypes <- stability(
predictions = BLUPs_GxE[[var]],
trial = "trial",
gen = "genotype",
best = "max"
)
stab_list[[var]] <- rbind(stab_list[[var]], stab_genotypes)
# Heritability
g_var <- mean(VCOV[[var]]$VCOV[upper.tri(VCOV[[var]]$VCOV, diag = FALSE)])
vdBLUP.mat <- BLUPs$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
h2_tmp <- 1 - (vdBLUP.avg / 2 / g_var)
h2_tmp <- data.frame(trait = var, h2 = h2_tmp)
h2_list[[var]] <- rbind(h2_list[[var]], h2_tmp)
}
trial_effects <- dplyr::bind_rows(trial_effects, .id = "trait")
overall_BLUPs <- dplyr::bind_rows(overall_BLUPs, .id = "trait")
BLUPs_GxE <- dplyr::bind_rows(BLUPs_GxE, .id = "trait")
stab_list <- dplyr::bind_rows(stab_list, .id = "trait")
h2_list <- dplyr::bind_rows(h2_list, .id = "trait")
objt_out <- list(
trial_effects = trial_effects,
overall_BLUPs = overall_BLUPs,
BLUPs_GxE = BLUPs_GxE,
VCOV = VCOV,
stability = stab_list,
heritability = h2_list
)
return(objt_out)
}
tmp <- met_analysis(sma_output = out)
tmp$heritability
met_analysis <- function(sma_output = NULL,
h2_filter = 0.2,
workspace = "1gb",
trials_to_fit_fa = 4) {
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
if (!requireNamespace("asreml", quietly = TRUE)) {
stop("The package asreml is not loaded.")
}
asreml::asreml.options(trace = FALSE, workspace = workspace)
data_td <- sma_output$blues_blups
traits <- data_td %>%
dplyr::pull("trait") %>%
unique() %>%
as.character()
trials <- data_td %>%
dplyr::pull("trial") %>%
unique() %>%
as.character()
n_trials <- length(trials)
if (n_trials <= 1) {
stop("There is only one trial to fit an MET model.")
}
conn <- connectivity_matrix(
data = data_td,
genotype = "genotype",
trial = "trial"
)
ceros <- which(conn == 0, arr.ind = TRUE)
if (nrow(ceros) > 1) {
warning(
"Some trials have zero connectivity: \t",
paste(rownames(ceros), collapse = ", ")
)
}
minimun_req <- which(conn < 20, arr.ind = TRUE)
if (nrow(minimun_req) > 1) {
message(
"Some trials could have poor connectivity: \t",
paste(rownames(ceros), collapse = ", ")
)
}
met_models <- VCOV <- trial_effects <- overall_BLUPs <- BLUPs_GxE <- list()
stab_list <- h2_list <- list()
for (var in traits) {
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(trait %in% var & heritability > h2_filter) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
dt <- data_td %>%
dplyr::filter(trait %in% var & trial %in% trials_to_keep) %>%
droplevels() %>%
as.data.frame()
equation_fix <- reformulate("trial", response = "BLUEs")
if (n_trials < trials_to_fit_fa) {
vcov_selected <- "us"
equation_ran <- reformulate("us(trial):genotype")
}
if (n_trials >= trials_to_fit_fa) {
vcov_selected <- "fa2"
equation_ran <- reformulate("fa(trial, 2):genotype")
}
met_mod <- suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "include", y = "include"),
trace = 0,
maxiter = 200
)
)
met_mod <- suppressWarnings(asreml::update.asreml(met_mod))
met_models[[var]] <- met_mod
VCOV[[var]] <- extractG(
model = met_mod,
gen = "genotype",
env = "trial",
vc.model = vcov_selected
)
# trial effects
trial_effects[[var]] <- rbind(
trial_effects[[var]],
suppressWarnings(
as.data.frame(
asreml::predict.asreml(met_mod, classify = "trial")$pvals
)
)
)
# Overall BLUPs
BLUPs <- suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype", sed = TRUE)
)
overall_BLUPs[[var]] <- rbind(
overall_BLUPs[[var]],
suppressWarnings(
as.data.frame(
BLUPs$pvals
)
)
)
# BLUPs GxE
BLUPs_GxE[[var]] <- rbind(
BLUPs_GxE[[var]],
as.data.frame(
suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype:trial")$pvals
)
)
)
# Stability
stab_genotypes <- stability(
predictions = BLUPs_GxE[[var]],
trial = "trial",
gen = "genotype",
best = "max"
)
stab_list[[var]] <- rbind(stab_list[[var]], stab_genotypes)
# Heritability
vcov_mat <- VCOV[[var]]$VCOV
g_var <- mean(vcov_mat[upper.tri(vcov_mat, diag = FALSE)])
vdBLUP.mat <- BLUPs$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
h2_tmp <- 1 - (vdBLUP.avg / 2 / g_var)
h2_tmp <- data.frame(trait = var, h2 = h2_tmp)
h2_list[[var]] <- rbind(h2_list[[var]], h2_tmp)
}
trial_effects <- dplyr::bind_rows(trial_effects, .id = "trait")
overall_BLUPs <- dplyr::bind_rows(overall_BLUPs, .id = "trait")
BLUPs_GxE <- dplyr::bind_rows(BLUPs_GxE, .id = "trait")
stab_list <- dplyr::bind_rows(stab_list, .id = "trait")
h2_list <- dplyr::bind_rows(h2_list, .id = "trait")
objt_out <- list(
trial_effects = trial_effects,
overall_BLUPs = overall_BLUPs,
BLUPs_GxE = BLUPs_GxE,
VCOV = VCOV,
stability = stab_list,
heritability = h2_list
)
return(objt_out)
}
tmp <- met_analysis(sma_output = out)
tmp$heritability
tmp$trial_effects
library(readr)
datos_unidos_prueba2 <- read_csv("C:/Users/japaricio/OneDrive - CGIAR/Alexia Bornhorst (Statistics)/DATASETS Example/datos unidos prueba2.csv")
head(datos_unidos_prueba2)
library(agriutilities)
dat <- datos_unidos_prueba2
results <- check_design_MET(
data = dat,
genotype = "geno",
trial = "Trial",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
str(datos_unidos_prueba2)
rlang::last_error()
datos_unidos_prueba2 <- read_csv("C:/Users/japaricio/OneDrive - CGIAR/Alexia Bornhorst (Statistics)/DATASETS Example/datos unidos prueba.csv")
head(datos_unidos_prueba2)
str(datos_unidos_prueba2)
dat <- datos_unidos_prueba2
str(datos_unidos_prueba2)
dat <- datos_unidos_prueba2
results <- check_design_MET(
data = dat,
genotype = "geno",
trial = "Trial",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_model_analysis(results, progress = FALSE)
out$resum_fitted_model
# install.packages("devtools")
devtools::install_github("AparicioJohan/agriutilities")
library(readxl)
library(agridat)
library(agriutilities)
dat <- read_excel(
"C:/Users/japaricio/OneDrive - CGIAR/2022/consultorias/Sebastian Bonansea (Breeding)/data/Y4_DB.xlsx"
)
results <- check_design_MET(
data = dat,
genotype = "Line_name",
trial = "Location",
traits = c("Yield_kg_h", "Protein_Perc", "First_Quality_Perc"),
rep = "Rep",
col = "Column",
row = "Row"
)
results$exp_design_resum
out <- single_model_analysis(results, progress = TRUE, remove_outliers = TRUE)
out$resum_fitted_model
out$blues_blups
out$outliers
met_analysis(
sma_output = results,
h2_filter = 0.2,
workspace = "1gb",
trials_to_fit_fa = 2
)
met_analysis(
sma_output = out,
h2_filter = 0.2,
workspace = "1gb",
trials_to_fit_fa = 2
)
results$exp_design_resum
results$summ_traits
MrBean::Dar16C_hiP
library(agriutilities)
library(readxl)
library(agridat)
library(agriutilities)
dat <- read_excel(
"C:/Users/japaricio/OneDrive - CGIAR/2022/consultorias/Sebastian Bonansea (Breeding)/data/Y4_DB.xlsx"
)
results <- check_design_MET(
data = dat,
genotype = "Line_name",
trial = "Location",
traits = c("Yield_kg_h", "Protein_Perc", "First_Quality_Perc"),
rep = "Rep",
col = "Column",
row = "Row"
)
results$exp_design_resum
results$
out <- single_model_analysis(results, progress = TRUE, remove_outliers = TRUE)
out$resum_fitted_model
out$blues_blups
out$outliers
results$
out <- single_model_analysis(results, progress = TRUE, remove_outliers = TRUE)
out$resum_fitted_model
out
results$
out <- single_model_analysis(results, progress = TRUE, remove_outliers = TRUE)
library(readxl)
library(agridat)
library(agriutilities)
dat <- read_excel(
"C:/Users/japaricio/OneDrive - CGIAR/2022/consultorias/Sebastian Bonansea (Breeding)/data/Y4_DB.xlsx"
)
results <- check_design_MET(
data = dat,
genotype = "Line_name",
trial = "Location",
traits = c("Yield_kg_h", "Protein_Perc", "First_Quality_Perc"),
rep = "Rep",
col = "Column",
row = "Row"
)
results$exp_design_resum
out <- single_model_analysis(results, progress = TRUE, remove_outliers = TRUE)
out$resum_fitted_model
out$blues_blups
out$outliers
out$resum_fitted_model
out$blues_blups
library(dplyr)
out$blues_blups %>%
group_by(trait) %>%
summarise(n_trials = n_distinct(trial))
out$blues_blups %>%
group_by(trait) %>%
summarise(n_trials = n_distinct(trial)) %>%
filter(n_trials <= 1) %>%
pull(trait)
library(agriutilities)
library(agriutilities)
pkgdown::build_site()
pkgdown::build_site()
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agriutilities)
library(agriutilities)
