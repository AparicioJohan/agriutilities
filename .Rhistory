genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
sma_output = results
h2_filter = 0.2
workspace = "1gb"
vcov = NULL
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
sma_output = results
h2_filter = 0.2
workspace = "1gb"
vcov = NULL
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
results
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
sma_output = results
h2_filter = 0.2
workspace = "1gb"
vcov = NULL
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
sma_output = out
h2_filter = 0.2
workspace = "1gb"
vcov = NULL
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
if (!requireNamespace("asreml", quietly = TRUE)) {
stop("The package asreml is not loaded.")
}
asreml::asreml.options(trace = FALSE, workspace = workspace)
# filters
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
trials_to_keep
data_td <- sma_output$blues_blups %>%
dplyr::filter(trial %in% trials_to_keep) %>%
droplevels()
traits <- data_td %>%
dplyr::pull("trait") %>%
unique() %>%
as.character()
trials <- data_td %>%
dplyr::pull("trial") %>%
unique() %>%
as.character()
trials
n_trials <- length(trials)
n_trials
n_trials
n_trials
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
if (!requireNamespace("asreml", quietly = TRUE)) {
stop("The package asreml is not loaded.")
}
asreml::asreml.options(trace = FALSE, workspace = workspace)
# filters
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
trials_to_keep
met_models <- VCOV <- trial_effects <- overall_BLUPs <- BLUPs_GxE <- list()
stab_list <- h2_list <- list()
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
sma_output = out
h2_filter = 0.2
workspace = "1gb"
vcov = NULL
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
h2_filter
var = traits[1]
var
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
trials_to_keep
data_td <- sma_output$blues_blups
data_td
data_td <- sma_output$blues_blups
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
dt <- data_td %>%
dplyr::filter(trait %in% var & trial %in% trials_to_keep) %>%
droplevels() %>%
as.data.frame()
dt
trials <- data_td %>%
dplyr::pull("trial") %>%
unique() %>%
as.character()
n_trials <- length(trials)
if (n_trials <= 1) {
stop("There is only one trial to fit an MET model.")
}
n_trials
stop("There is only one trial to fit an MET model in '", var, "'")
asreml::asreml.options(trace = FALSE, workspace = workspace)
met_models <- VCOV <- trial_effects <- overall_BLUPs <- BLUPs_GxE <- list()
stab_list <- h2_list <- list()
data_td <- sma_output$blues_blups
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
trials_to_keep
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
trials_to_keep
data_td
conn <- connectivity_matrix(
data = data_td,
genotype = "genotype",
trial = "trial",
response = "BLUEs"
)
conn
ceros <- which(conn == 0, arr.ind = TRUE)
if (nrow(ceros) > 1) {
warning(
"Some trials have zero connectivity: \n",
paste(unique(rownames(ceros)), collapse = ", "),
"\n"
)
}
minimun_req <- which(conn < 20, arr.ind = TRUE)
if (nrow(minimun_req) > 1) {
warning(
"Some trials could have poor connectivity: \n",
paste(unique(rownames(ceros)), collapse = ", ")
)
}
#'   traits = c("yield"),
#'   rep = "rep",
#'   block = "block",
#'   col = "col",
#'   row = "row"
#' )
#' out <- single_trial_analysis(results, progress = FALSE)
#' met_results <- met_analysis(out)
#' print(met_results)
#' }
met_analysis <- function(sma_output = NULL,
h2_filter = 0.2,
workspace = "1gb",
vcov = NULL) {
if (!inherits(sma_output, "smaAgri")) {
stop("The object should be of smaAgri class")
}
if (!requireNamespace("asreml", quietly = TRUE)) {
stop("The package asreml is not loaded.")
}
asreml::asreml.options(trace = FALSE, workspace = workspace)
met_models <- VCOV <- trial_effects <- overall_BLUPs <- BLUPs_GxE <- list()
stab_list <- h2_list <- list()
data_td <- sma_output$blues_blups
for (var in traits) {
trials_to_keep <- sma_output$resum_fitted_model %>%
dplyr::filter(heritability > h2_filter & trait %in% var) %>%
droplevels() %>%
dplyr::pull(trial) %>%
as.character()
n_trials <- length(trials_to_keep)
if (n_trials <= 1) {
stop("There is only one trial to fit an MET model in '", var, "'")
}
dt <- data_td %>%
dplyr::filter(trait %in% var & trial %in% trials_to_keep) %>%
droplevels() %>%
as.data.frame()
conn <- connectivity_matrix(
data = data_td,
genotype = "genotype",
trial = "trial",
response = "BLUEs"
)
ceros <- which(conn == 0, arr.ind = TRUE)
if (nrow(ceros) > 1) {
warning(
"Some trials have zero connectivity: \n",
paste(unique(rownames(ceros)), collapse = ", "),
"\n"
)
}
minimun_req <- which(conn < 20, arr.ind = TRUE)
if (nrow(minimun_req) > 1) {
warning(
"Some trials could have poor connectivity: \n",
paste(unique(rownames(ceros)), collapse = ", ")
)
}
equation_fix <- stats::reformulate("trial", response = "BLUEs")
if (is.null(vcov)) {
vcov_selected <- "us"
equation_ran <- stats::reformulate("us(trial):genotype")
met_mod <- try(
suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "exclude", y = "include"),
trace = 0,
maxiter = 200
)
),
)
if (inherits(met_mod, "try-error")) {
vcov_selected <- "fa2"
equation_ran <- stats::reformulate("fa(trial, 2):genotype")
met_mod <- try(
suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "exclude", y = "include"),
trace = 0,
maxiter = 200
)
),
)
}
if (inherits(met_mod, "try-error")) {
vcov_selected <- "fa1"
equation_ran <- stats::reformulate("fa(trial, 1):genotype")
met_mod <- try(
suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "exclude", y = "include"),
trace = 0,
maxiter = 200
)
),
)
}
if (inherits(met_mod, "try-error")) {
stop(
"Trait '", var, "'\n",
"We couldn't fit any variance-covariance structure."
)
}
} else if (vcov == "fa1") {
vcov_selected <- "fa1"
equation_ran <- stats::reformulate("fa(trial, 1):genotype")
} else if (vcov == "fa2") {
vcov_selected <- "fa2"
equation_ran <- stats::reformulate("fa(trial, 2):genotype")
} else if (vcov == "us") {
vcov_selected <- "us"
equation_ran <- stats::reformulate("us(trial):genotype")
} else if (vcov == "corh") {
vcov_selected <- "corh"
equation_ran <- stats::reformulate("corh(trial):genotype")
} else {
stop(paste0("No '", vcov, "' variance-covariance structure found."))
}
met_mod <- try(
suppressWarnings(
asreml::asreml(
fixed = equation_fix,
random = equation_ran,
data = dt,
weights = wt,
family = asreml::asr_gaussian(dispersion = 1),
na.action = list(x = "exclude", y = "include"),
trace = 0,
maxiter = 200
)
)
)
if (inherits(met_mod, "try-error")) {
stop(
"Trait '", var, "'\n",
"We couldn't fit any variance-covariance structure."
)
}
met_mod <- suppressWarnings(asreml::update.asreml(met_mod))
met_models[[var]] <- met_mod
VCOV[[var]] <- extractG(
model = met_mod,
gen = "genotype",
env = "trial",
vc.model = vcov_selected
)
# trial effects
trial_effects[[var]] <- rbind(
trial_effects[[var]],
suppressWarnings(
as.data.frame(
asreml::predict.asreml(met_mod, classify = "trial")$pvals
)
)
)
# Overall BLUPs
BLUPs <- suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype", sed = TRUE)
)
overall_BLUPs[[var]] <- rbind(
overall_BLUPs[[var]],
suppressWarnings(
as.data.frame(
BLUPs$pvals
)
)
)
# BLUPs GxE
BLUPs_GxE[[var]] <- rbind(
BLUPs_GxE[[var]],
as.data.frame(
suppressWarnings(
asreml::predict.asreml(met_mod, classify = "genotype:trial")$pvals
)
)
)
# Stability
stab_genotypes <- stability(
predictions = BLUPs_GxE[[var]],
trial = "trial",
genotype = "genotype",
best = "max"
)
stab_list[[var]] <- rbind(stab_list[[var]], stab_genotypes)
# Heritability
vcov_mat <- VCOV[[var]]$VCOV
g_var <- mean(vcov_mat[upper.tri(vcov_mat, diag = FALSE)])
vdBLUP.mat <- BLUPs$sed^2
vdBLUP.avg <- mean(vdBLUP.mat[upper.tri(vdBLUP.mat, diag = FALSE)])
h2_tmp <- 1 - (vdBLUP.avg / 2 / g_var)
h2_tmp <- data.frame(trait = var, h2 = h2_tmp)
h2_list[[var]] <- rbind(h2_list[[var]], h2_tmp)
}
trial_effects <- dplyr::bind_rows(trial_effects, .id = "trait")
overall_BLUPs <- dplyr::bind_rows(overall_BLUPs, .id = "trait")
BLUPs_GxE <- dplyr::bind_rows(BLUPs_GxE, .id = "trait")
stab_list <- dplyr::bind_rows(stab_list, .id = "trait")
h2_list <- dplyr::bind_rows(h2_list, .id = "trait")
objt_out <- list(
trial_effects = trial_effects,
overall_BLUPs = overall_BLUPs,
BLUPs_GxE = BLUPs_GxE,
VCOV = VCOV,
stability = stab_list,
heritability = h2_list
)
class(objt_out) <- "metAgri"
return(invisible(objt_out))
}
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
covcor_heat(matrix = met_results$VCOV$yield$CORR)
covcor_heat(matrix = round(met_results$VCOV$yield$CORR, 2))
covcor_heat(matrix = round(met_results$VCOV$yield$CORR, 3))
library(agriutilities)
library(agriutilities)
library(agriutilities)
detach("package:agriutilities", unload = TRUE)
library(agriutilities)
covcor_heat
covcor_heat
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
library(agriutilities)
library(agridat)
library(agriutilities)
data(besag.met)
dat <- besag.met
results <- check_design_MET(
data = dat,
genotype = "gen",
trial = "county",
traits = c("yield"),
rep = "rep",
block = "block",
col = "col",
row = "row"
)
out <- single_trial_analysis(results, progress = FALSE)
met_results <- met_analysis(out)
print(met_results)
covcor_heat(matrix = met_results$VCOV$yield$CORR)
covcor_heat(matrix = met_results$VCOV$yield$VCOV)
covcor_heat(matrix = met_results$VCOV$yield$VCOV, corr = FALSE)
covcor_heat(matrix = met_results$VCOV$yield$CORR)
library(agriutilities)
library(agriutilities)
library(agriutilities)
detach("package:agriutilities", unload = TRUE)
library(agriutilities)
library(agriutilities)
